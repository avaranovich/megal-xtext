grammar org.softlang.megal.language.Megal hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://softlang.wikidot.com/megal"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Megamodel:
	'model' name=QID
	('import' imports+=[Megamodel|QID] | declarations+=Declaration | bindings+=Link)*;

Declaration:
	EntityType | RelationshipType | Entity | Relationship | FunctionApplication;

PrefixAnnotation returns Annotation:
	'@' key=QID (value=STRING)?;

ShowNameAnnotation returns Annotation:
	'[' value=STRING ']';

Link:
	annotations+=PrefixAnnotation*
	link=[Entity|QID] '=' to=URI;

EntityType:
	annotations+=PrefixAnnotation*
	name=QID
	(annotations+=ShowNameAnnotation)?
	('<' supertype=EntityTypeReference | 'as' 'entity');

RelationshipType:
	annotations+=PrefixAnnotation*
	name=QID
	(annotations+=ShowNameAnnotation)?
	'<' left=EntityTypeReference
	'*' right=EntityTypeReference;

Entity:
	annotations+=PrefixAnnotation*
	(dependent?='?' | parameter?='!')?
	name=QID
	(annotations+=ShowNameAnnotation)?
	':' type=EntityTypeReference;

Relationship:
	annotations+=PrefixAnnotation*
	left=[Entity|QID]
	type=[RelationshipType|QID]
	right=[Entity|QID];

FunctionApplication:
	annotations+=PrefixAnnotation*
	function=[Entity|QID]
	'(' input=[Entity|QID] ')' '|' '->' output=[Entity|QID];

EntityTypeReference:
	definition=[EntityType|QID]
	('[' parameters+=[Entity|QID] ('->' parameters+=[Entity|QID])* ']')?
	(many?='+')?;

QID:
	NAME ('::' NAME)*;

NAME:
	ID ('.' ID)*;

ID:
	UCID | LCID;
	/**
	 * Upper case identifier, most likely an entity
	 */
terminal UCID:
	'^'? ('A'..'Z' | '0'..'9') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

	/**
	 * Lower case identifier, most likely a relationship
	 */
terminal LCID:
	'^'? ('a'..'z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

	/**
	 * String, for annotation values
	 */
terminal STRING:
	'"' ('\\' . | !('\\' | '"'))* '"' |
	"'" ('\\' . | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

	/**
	 * Segment of an URI
	 */
terminal fragment SEGMENT:
	('A'..'Z' | 'a'..'z' | '0'..'9' | '-' | '.' | '_' | '~' | ':' | '?' | '#' | '[' | ']' | '@' | '!' | '$' | '&' | "'" |
	'(' | ')' | '*' | '+' | ',' | ';' | '=')+;

	/**
	 * An URI
	 */
terminal URI returns URI:
	('a'..'z')+ ':/' '/'? (SEGMENT ('/' SEGMENT)* '/'?)?;