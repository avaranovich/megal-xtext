/*
 * generated by Xtext
 */
package org.softlang.megal.language.validation

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import org.softlang.megal.EntityType
import org.softlang.megal.MegalPackage
import org.softlang.megal.Megamodel
import org.softlang.megal.Relationship
import org.softlang.megal.language.MegalReasoning
import org.softlang.megal.mi2.Entity
import org.softlang.megal.mi2.MegamodelKB
import org.softlang.megal.mi2.api.Message
import org.softlang.megal.mi2.api.resolution.ContainingProjectResolution
import org.softlang.megal.mi2.KB
import org.softlang.megal.mi2.api.ModelExecutor

/**
 * Custom validation rules. 
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class MegalValidator extends AbstractMegalValidator {

	public static val NO_APPLICABLE_INSTANCE = 'noApplicableInstance'
	public static val ENTITY_NOT_CALLED_ENTITY = 'entityNotCalledEntity'

	@Check
	def checkEntityCalledEntity(EntityType x) {
		if (x.supertype == null && x.name != KB.ENTITY)
			error('''Root entity type must be called «KB.ENTITY».''', MegalPackage.Literals.NAMED__NAME,
				ENTITY_NOT_CALLED_ENTITY)
	}

	@Check
	def checkRelationshipTypeApplicable(Relationship x) {
		val rs = MegalReasoning.getKB(x.eContainer as Megamodel)

		val left = rs.getEntity(x.left.name)
		val right = rs.getEntity(x.right.name)
		val types = rs.getRelationshipTypes(x.type.name)

		if (!types.exists[isApplicable(left, right)])
			error('''No instance applicable for «x.type?.name» from «left» to «right»''',
				MegalPackage.Literals.RELATIONSHIP__TYPE, NO_APPLICABLE_INSTANCE)

	}

	def writeMessageTo(Message message, boolean isInvalid, EObject corr, EStructuralFeature feature) {
		switch (message.level) {
			case isInvalid:
				info('''Failed as expected: «message.message»''', corr, feature)
			case INFO:
				info(message.message, corr, feature)
			case WARNING:
				warning(message.message, corr, feature)
			case ERROR:
				error(message.message, corr, feature)
		}
	}

	/**
	 * This check requires expensive megamodel evaluation
	 */
	@Check
	def checkValidate(Megamodel m) {
		val evaluator = new ModelExecutor
		val result = evaluator.evaluate(new ContainingProjectResolution(m), MegalReasoning.getKB(m))

		for (loc : result.messageLocations) {
			val isInvalid = loc.origin.annotations.containsKey("IsInvalid")

			// Get root trace element
			switch root : loc.origin {
				// If the root is an entity
				Entity: {
					// Resolve the direct entity and annotate if present
					val pent = MegamodelKB.resolve(false, m, root)
					if (pent != null)
						writeMessageTo(loc.message, isInvalid, pent, MegalPackage.Literals.NAMED__NAME)

					// Resolve the function application pair entity and annotate if present
					val pfirst = MegamodelKB.resolvePair(false, m, root)
					if (pfirst != null)
						writeMessageTo(loc.message, isInvalid, pfirst,
							MegalPackage.Literals.FUNCTION_APPLICATION__FUNCTION)
				}
				// If the root is a relationship
				org.softlang.megal.mi2.Relationship: {
					// Resolve the direct relationship and annotate if present
					val prel = MegamodelKB.resolve(false, m, root)
					if (prel != null)
						writeMessageTo(loc.message, isInvalid, prel, MegalPackage.Literals.RELATIONSHIP__TYPE)

					// Resolve the firstOf relationship and annotate if present
					val pfo = MegamodelKB.resolveFirst(false, m, root)
					if (pfo != null)
						writeMessageTo(loc.message, isInvalid, pfo, MegalPackage.Literals.FUNCTION_APPLICATION__INPUT)

					// Resolve the secondOf relationship and annotate if present
					val pso = MegamodelKB.resolveSecond(false, m, root)
					if (pso != null)
						writeMessageTo(loc.message, isInvalid, pso, MegalPackage.Literals.FUNCTION_APPLICATION__OUTPUT)

					// Resolve the secondOf relationship and annotate if present
					val peo = MegamodelKB.resolveElement(false, m, root)
					if (peo != null)
						writeMessageTo(loc.message, isInvalid, peo,
							MegalPackage.Literals.FUNCTION_APPLICATION__FUNCTION)
				}
			}
		}
	}
}
