@Suppress 'entityNotConsidered'
model Prelude

Entity as entity

@Color '223,108,91'
Artifact < Entity

@Color '244,200,45'
Concept < Entity
Function < Entity

@Color '129,173,203'
Set < Entity

@Color '82,237,143'
Technology < Entity

@Plugin 'LanguageResolver'
@Color '73,158,216'
Language < Set

@Color '231,65,41'
File < Artifact
Folder < Artifact
Fragment < Artifact
Resource < Artifact
Transient < Artifact



// Relationship types
elementOf < Entity (+) * Set

subsetOf < Set * Set

partOf < Artifact * Artifact
partOf < Artifact * Technology
partOf < Technology * Technology
partOf < Language * Technology





instanceOf < Concept * Concept

isA < Concept * Concept

conformsTo < Artifact (+) * Artifact (+)

dependsOn < Artifact (+) * Artifact (+)
dependsOn < Technology * Language
dependsOn < Technology * Technology
// VERMUTLICH FALSCH
dependsOn < Function * Technology

transformableIn < Language * Language
transformedIn < Language * Language
transformedIn < Artifact (+) * Artifact (+)

correspondsTo < Artifact (+) * Artifact (+)

defines < Artifact (+) * Language
defines < Artifact (+) * Function

linksTo < File (+) * File (+)

realizationOf < Artifact (+) * Function

// XHTML variantOf HTML
variantOf < Language * Language
versionOf < Language * Language

// a deployment perspective, where one technology is used as a container for deployment and execution of the other one
deploysTo < Technology * Technology

partOf < Language * Language


@Suppress 'notConsidered'
@Color '221,208,168'
Plugin < Entity


@Suppress 'relationshipNotConsidered'
realizationOf < Plugin * Entity

@Suppress 'relationshipNotConsidered'
partOf < Plugin * Plugin

@Plugin 'FileElementOfLanguage'
elementOf < File (+) * Language


// Dispatcher with master as link and parameter dependence
FileElementOfLanguage: Plugin
FileElementOfLanguage = 'classpath:plugins.root.elementof.FileElementOfLanguage'

// Replacement for the function application
Pair < Entity
firstOf < Entity (+) * Pair
secondOf < Entity (+) * Pair

@Plugin 'PairElementWhenComputed'
elementOf < Pair * Function

PairElementWhenComputed: Plugin
PairElementWhenComputed = 'classpath:plugins.root.elementof.PairElementWhenComputed'

// From model
refersTo < Artifact (+) * Technology
refersTo < Artifact (+) * Artifact (+)

// bindingEvaluator, evaluates links by inference
LanguageResolver: Plugin
LanguageResolver = 'classpath:plugins.LanguageResolver'