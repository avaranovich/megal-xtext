model Mapping
import Parts

// Type-level mapping
javaFiles : File+
javaFiles elementOf JAXB.Java

JAXB.Generator(xsdFiles) |-> javaFiles
JAXB.Generator(xsdFiles) |-> javaFiles = "workspace:/org.softlang.megal.examples/build.xml"

@Plugin 'FindBuildScriptAsElementOfProof'
elementOf < Pair * Function

xsdFiles = "workspace:/org.softlang.megal.examples/inputs/Company.xsd"
javaFiles = "workspace:/org.softlang.megal.examples/src/org/softlang/company/xjc/"

FindBuildScriptAsElementOfProof : Plugin
FindBuildScriptAsElementOfProof = 'classpath:plugins.jaxb.FindBuildScriptAsElementOfProof'

// DONE: Plugin for “pairOfFilesElementOf” for JAXB.Generator as a sample-specific test on a buildscript to find a trace of an xjc invocation that appears process xsdFiles and to output to the javaFiles. To this end, the plugin needs to see preferably the “file names” of xsdFiles and javaFiles, which should be straightforward, if the plugin “sees” the relationship and the involved entities and their “linking” information.

// Design of function plugins: 
aLanguage : Language // TODO: Plugin for both domain definition
aLanguage = "http: ... company.xsd"
xsdFiles defines aLanguage // Does not need to be validated perhaps
javaFiles defines aLanguage // Ditto
// (... to here ...)


// TODO: plugin needed for correspondsTo evaluator for XSD and Java+
xsdFiles correspondsTo javaFiles 