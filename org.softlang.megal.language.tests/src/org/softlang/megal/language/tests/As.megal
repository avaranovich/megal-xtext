model As
import Prelude

// Language of all As (small or capital)
OnlyAs: Language

// Evaluator for this trick
OnlyAsAcceptor: Evaluator
OnlyAsAcceptor partOf FileElementOfLanguage
OnlyAsAcceptor realizationOf OnlyAs
OnlyAsAcceptor = "classpath:pluginroot.elementof.AcceptOnlyAs"

FailyAcceptor: Evaluator
FailyAcceptor partOf FileElementOfLanguage
FailyAcceptor realizationOf OnlyAs
FailyAcceptor = "classpath:pluginroot.elementof.AcceptOnlySomethingThatDoesNotExist"

OnlyBs: Language


// Nothing is always element of only As
nothing: File
nothing = "ex/em"
nothing elementOf OnlyAs


// As test suite
//@IsInvalid
//nothing elementOf OnlyBs

// This is element of only As, look at the content you fool!
something: File
something = "ex/ar"
something elementOf OnlyAs
//
//// This isn't
otherthing : File
otherthing = "ex/nr"
otherthing elementOf OnlyAs

wierdStuff: Filelocation
wierdStuff elementOf OnlyBs

ParserSystem < Technology

JavaCompiler : Technology
JavaCompiler.Parser : ParserSystem

coolStuff : Function[OnlyAs->OnlyBs]
coolStuff(something)|->wierdStuff
coolStuff(something)|->wierdStuff = "A really wierd correlation that is defined by some obscure mapping"
wierdStuff correspondsTo something


X < Entity
Y < X

rel < Entity * Entity
rel < X * Entity
rel < Entity * X
rel < Y * Entity

rel2 < Entity * Entity


a : Entity
b : Entity
c : Y
a rel b
c rel b

a rel2 b
