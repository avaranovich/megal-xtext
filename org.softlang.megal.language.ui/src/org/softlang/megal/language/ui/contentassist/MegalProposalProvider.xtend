/*
 * generated by Xtext
 */
package org.softlang.megal.language.ui.contentassist

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.softlang.megal.Link
import org.softlang.megal.api.URI
import org.softlang.megal.fragmentprovider.Evaluator

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class MegalProposalProvider extends AbstractMegalProposalProvider {
	@Inject Evaluator evaluator

	override complete_URI(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {

		switch model {
			Link:
				try {
					val pf = URI.valueOf(context.prefix)

					// Evaluate and propose for
					if (!proposeForAll(pf, acceptor, context) && pf.hasParent)
						proposeForAll(pf.parent, acceptor, context)

				} catch (IllegalArgumentException e) {
				}
		}
	}

	def proposeForAll(URI uri, ICompletionProposalAcceptor acceptor, ContentAssistContext context) {
		val pfe = evaluator.evaluate(uri)
		for (c : pfe)
			proposeFor(c, uri, acceptor, context)
		!pfe.empty
	}

	def proposeFor(Object item, URI uri, ICompletionProposalAcceptor acceptor, ContentAssistContext context) {
		for (n : evaluator.next(item)) {
			val d = '''«n»'''
			val v = '''«uri»«IF !uri.folder»/«ENDIF»«n»'''
			acceptor.accept(createCompletionProposal(v, d, null, context))
		}
	}

}
