/*
* generated by Xtext
*/
package org.softlang.megal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MegaLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMegaLDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMegaLLinkingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	MegaLDefinition | MegaLLinking;
		public ParserRule getRule() { return rule; }

		//MegaLDefinition | MegaLLinking
		public Alternatives getAlternatives() { return cAlternatives; }

		//MegaLDefinition
		public RuleCall getMegaLDefinitionParserRuleCall_0() { return cMegaLDefinitionParserRuleCall_0; }

		//MegaLLinking
		public RuleCall getMegaLLinkingParserRuleCall_1() { return cMegaLLinkingParserRuleCall_1; }
	}

	public class MegaLDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MegaLDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLinkedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLinkerAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cLinkerMegaLLinkingCrossReference_2_2_0 = (CrossReference)cLinkerAssignment_2_2.eContents().get(0);
		private final RuleCall cLinkerMegaLLinkingQualifiedIDParserRuleCall_2_2_0_1 = (RuleCall)cLinkerMegaLLinkingCrossReference_2_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cImportKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cImportsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cImportsMegaLDefinitionCrossReference_3_0_1_0 = (CrossReference)cImportsAssignment_3_0_1.eContents().get(0);
		private final RuleCall cImportsMegaLDefinitionIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cImportsMegaLDefinitionCrossReference_3_0_1_0.eContents().get(1);
		private final Assignment cEtdAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cEtdETDParserRuleCall_3_1_0 = (RuleCall)cEtdAssignment_3_1.eContents().get(0);
		private final Assignment cRtdAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cRtdRTDParserRuleCall_3_2_0 = (RuleCall)cRtdAssignment_3_2.eContents().get(0);
		private final Assignment cEdAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cEdEDParserRuleCall_3_3_0 = (RuleCall)cEdAssignment_3_3.eContents().get(0);
		private final Assignment cRdAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cRdRDParserRuleCall_3_4_0 = (RuleCall)cRdAssignment_3_4.eContents().get(0);
		
		//MegaLDefinition:
		//	"model" name=QualifiedID ("linked" "in" linker=[MegaLLinking|QualifiedID])? ("import" imports+=[MegaLDefinition] |
		//	etd+=ETD | rtd+=RTD | ed+=ED | rd+=RD)*;
		public ParserRule getRule() { return rule; }

		//"model" name=QualifiedID ("linked" "in" linker=[MegaLLinking|QualifiedID])? ("import" imports+=[MegaLDefinition] |
		//etd+=ETD | rtd+=RTD | ed+=ED | rd+=RD)*
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=QualifiedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedID
		public RuleCall getNameQualifiedIDParserRuleCall_1_0() { return cNameQualifiedIDParserRuleCall_1_0; }

		//("linked" "in" linker=[MegaLLinking|QualifiedID])?
		public Group getGroup_2() { return cGroup_2; }

		//"linked"
		public Keyword getLinkedKeyword_2_0() { return cLinkedKeyword_2_0; }

		//"in"
		public Keyword getInKeyword_2_1() { return cInKeyword_2_1; }

		//linker=[MegaLLinking|QualifiedID]
		public Assignment getLinkerAssignment_2_2() { return cLinkerAssignment_2_2; }

		//[MegaLLinking|QualifiedID]
		public CrossReference getLinkerMegaLLinkingCrossReference_2_2_0() { return cLinkerMegaLLinkingCrossReference_2_2_0; }

		//QualifiedID
		public RuleCall getLinkerMegaLLinkingQualifiedIDParserRuleCall_2_2_0_1() { return cLinkerMegaLLinkingQualifiedIDParserRuleCall_2_2_0_1; }

		//("import" imports+=[MegaLDefinition] | etd+=ETD | rtd+=RTD | ed+=ED | rd+=RD)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"import" imports+=[MegaLDefinition]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"import"
		public Keyword getImportKeyword_3_0_0() { return cImportKeyword_3_0_0; }

		//imports+=[MegaLDefinition]
		public Assignment getImportsAssignment_3_0_1() { return cImportsAssignment_3_0_1; }

		//[MegaLDefinition]
		public CrossReference getImportsMegaLDefinitionCrossReference_3_0_1_0() { return cImportsMegaLDefinitionCrossReference_3_0_1_0; }

		//ID
		public RuleCall getImportsMegaLDefinitionIDTerminalRuleCall_3_0_1_0_1() { return cImportsMegaLDefinitionIDTerminalRuleCall_3_0_1_0_1; }

		//etd+=ETD
		public Assignment getEtdAssignment_3_1() { return cEtdAssignment_3_1; }

		//ETD
		public RuleCall getEtdETDParserRuleCall_3_1_0() { return cEtdETDParserRuleCall_3_1_0; }

		//rtd+=RTD
		public Assignment getRtdAssignment_3_2() { return cRtdAssignment_3_2; }

		//RTD
		public RuleCall getRtdRTDParserRuleCall_3_2_0() { return cRtdRTDParserRuleCall_3_2_0; }

		//ed+=ED
		public Assignment getEdAssignment_3_3() { return cEdAssignment_3_3; }

		//ED
		public RuleCall getEdEDParserRuleCall_3_3_0() { return cEdEDParserRuleCall_3_3_0; }

		//rd+=RD
		public Assignment getRdAssignment_3_4() { return cRdAssignment_3_4; }

		//RD
		public RuleCall getRdRDParserRuleCall_3_4_0() { return cRdRDParserRuleCall_3_4_0; }
	}

	public class ETDRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETDR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETDEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETDDeclaredParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ETDR:
		//	ETDEntity | ETDDeclared;
		public ParserRule getRule() { return rule; }

		//ETDEntity | ETDDeclared
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETDEntity
		public RuleCall getETDEntityParserRuleCall_0() { return cETDEntityParserRuleCall_0; }

		//ETDDeclared
		public RuleCall getETDDeclaredParserRuleCall_1() { return cETDDeclaredParserRuleCall_1; }
	}

	public class ETDEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETDEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETDEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ETDEntity:
		//	{ETDEntity} "Entity";
		public ParserRule getRule() { return rule; }

		//{ETDEntity} "Entity"
		public Group getGroup() { return cGroup; }

		//{ETDEntity}
		public Action getETDEntityAction_0() { return cETDEntityAction_0; }

		//"Entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
	}

	public class ETDDeclaredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETDDeclared");
		private final Assignment cReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferenceETDCrossReference_0 = (CrossReference)cReferenceAssignment.eContents().get(0);
		private final RuleCall cReferenceETDIDTerminalRuleCall_0_1 = (RuleCall)cReferenceETDCrossReference_0.eContents().get(1);
		
		//ETDDeclared:
		//	reference=[ETD];
		public ParserRule getRule() { return rule; }

		//reference=[ETD]
		public Assignment getReferenceAssignment() { return cReferenceAssignment; }

		//[ETD]
		public CrossReference getReferenceETDCrossReference_0() { return cReferenceETDCrossReference_0; }

		//ID
		public RuleCall getReferenceETDIDTerminalRuleCall_0_1() { return cReferenceETDIDTerminalRuleCall_0_1; }
	}

	public class ETDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSupertypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSupertypeETDRParserRuleCall_2_0 = (RuleCall)cSupertypeAssignment_2.eContents().get(0);
		
		//ETD:
		//	name=ID "<" supertype=ETDR;
		public ParserRule getRule() { return rule; }

		//name=ID "<" supertype=ETDR
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//supertype=ETDR
		public Assignment getSupertypeAssignment_2() { return cSupertypeAssignment_2; }

		//ETDR
		public RuleCall getSupertypeETDRParserRuleCall_2_0() { return cSupertypeETDRParserRuleCall_2_0; }
	}

	public class RTDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RTD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainETDRParserRuleCall_2_0 = (RuleCall)cDomainAssignment_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCoDomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCoDomainETDRParserRuleCall_4_0 = (RuleCall)cCoDomainAssignment_4.eContents().get(0);
		
		//RTD:
		//	name=ID "<" domain=ETDR "*" coDomain=ETDR;
		public ParserRule getRule() { return rule; }

		//name=ID "<" domain=ETDR "*" coDomain=ETDR
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//domain=ETDR
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }

		//ETDR
		public RuleCall getDomainETDRParserRuleCall_2_0() { return cDomainETDRParserRuleCall_2_0; }

		//"*"
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }

		//coDomain=ETDR
		public Assignment getCoDomainAssignment_4() { return cCoDomainAssignment_4; }

		//ETDR
		public RuleCall getCoDomainETDRParserRuleCall_4_0() { return cCoDomainETDRParserRuleCall_4_0; }
	}

	public class EDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ED");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeETDRParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ED:
		//	name=ID ":" type=ETDR;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=ETDR
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ETDR
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ETDR
		public RuleCall getTypeETDRParserRuleCall_2_0() { return cTypeETDRParserRuleCall_2_0; }
	}

	public class RDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceEDCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceEDIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceEDCrossReference_0_0.eContents().get(1);
		private final Assignment cRelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRelRTDCrossReference_1_0 = (CrossReference)cRelAssignment_1.eContents().get(0);
		private final RuleCall cRelRTDIDTerminalRuleCall_1_0_1 = (RuleCall)cRelRTDCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEDCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEDIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEDCrossReference_2_0.eContents().get(1);
		
		//RD:
		//	source=[ED] rel=[RTD] target=[ED];
		public ParserRule getRule() { return rule; }

		//source=[ED] rel=[RTD] target=[ED]
		public Group getGroup() { return cGroup; }

		//source=[ED]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[ED]
		public CrossReference getSourceEDCrossReference_0_0() { return cSourceEDCrossReference_0_0; }

		//ID
		public RuleCall getSourceEDIDTerminalRuleCall_0_0_1() { return cSourceEDIDTerminalRuleCall_0_0_1; }

		//rel=[RTD]
		public Assignment getRelAssignment_1() { return cRelAssignment_1; }

		//[RTD]
		public CrossReference getRelRTDCrossReference_1_0() { return cRelRTDCrossReference_1_0; }

		//ID
		public RuleCall getRelRTDIDTerminalRuleCall_1_0_1() { return cRelRTDIDTerminalRuleCall_1_0_1; }

		//target=[ED]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[ED]
		public CrossReference getTargetEDCrossReference_2_0() { return cTargetEDCrossReference_2_0; }

		//ID
		public RuleCall getTargetEDIDTerminalRuleCall_2_0_1() { return cTargetEDIDTerminalRuleCall_2_0_1; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class MegaLLinkingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MegaLLinking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTargetMegaLDefinitionCrossReference_2_1_0 = (CrossReference)cTargetAssignment_2_1.eContents().get(0);
		private final RuleCall cTargetMegaLDefinitionQualifiedIDParserRuleCall_2_1_0_1 = (RuleCall)cTargetMegaLDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Assignment cLinksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinksLDParserRuleCall_3_0 = (RuleCall)cLinksAssignment_3.eContents().get(0);
		
		//MegaLLinking:
		//	"linking" name=QualifiedID ("for" target=[MegaLDefinition|QualifiedID])? links+=LD*;
		public ParserRule getRule() { return rule; }

		//"linking" name=QualifiedID ("for" target=[MegaLDefinition|QualifiedID])? links+=LD*
		public Group getGroup() { return cGroup; }

		//"linking"
		public Keyword getLinkingKeyword_0() { return cLinkingKeyword_0; }

		//name=QualifiedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedID
		public RuleCall getNameQualifiedIDParserRuleCall_1_0() { return cNameQualifiedIDParserRuleCall_1_0; }

		//("for" target=[MegaLDefinition|QualifiedID])?
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//target=[MegaLDefinition|QualifiedID]
		public Assignment getTargetAssignment_2_1() { return cTargetAssignment_2_1; }

		//[MegaLDefinition|QualifiedID]
		public CrossReference getTargetMegaLDefinitionCrossReference_2_1_0() { return cTargetMegaLDefinitionCrossReference_2_1_0; }

		//QualifiedID
		public RuleCall getTargetMegaLDefinitionQualifiedIDParserRuleCall_2_1_0_1() { return cTargetMegaLDefinitionQualifiedIDParserRuleCall_2_1_0_1; }

		//links+=LD*
		public Assignment getLinksAssignment_3() { return cLinksAssignment_3; }

		//LD
		public RuleCall getLinksLDParserRuleCall_3_0() { return cLinksLDParserRuleCall_3_0; }
	}

	public class LDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetEDCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetEDIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetEDCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_1_1_0 = (RuleCall)cKeyAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//LD:
		//	target=[ED] ("." key=ID)? "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//target=[ED] ("." key=ID)? "=" value=STRING
		public Group getGroup() { return cGroup; }

		//target=[ED]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[ED]
		public CrossReference getTargetEDCrossReference_0_0() { return cTargetEDCrossReference_0_0; }

		//ID
		public RuleCall getTargetEDIDTerminalRuleCall_0_0_1() { return cTargetEDIDTerminalRuleCall_0_0_1; }

		//("." key=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//key=ID
		public Assignment getKeyAssignment_1_1() { return cKeyAssignment_1_1; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_1_0() { return cKeyIDTerminalRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private ModelElements pModel;
	private MegaLDefinitionElements pMegaLDefinition;
	private ETDRElements pETDR;
	private ETDEntityElements pETDEntity;
	private ETDDeclaredElements pETDDeclared;
	private ETDElements pETD;
	private RTDElements pRTD;
	private EDElements pED;
	private RDElements pRD;
	private QualifiedIDElements pQualifiedID;
	private MegaLLinkingElements pMegaLLinking;
	private LDElements pLD;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MegaLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.softlang.megal.MegaL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	MegaLDefinition | MegaLLinking;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//MegaLDefinition:
	//	"model" name=QualifiedID ("linked" "in" linker=[MegaLLinking|QualifiedID])? ("import" imports+=[MegaLDefinition] |
	//	etd+=ETD | rtd+=RTD | ed+=ED | rd+=RD)*;
	public MegaLDefinitionElements getMegaLDefinitionAccess() {
		return (pMegaLDefinition != null) ? pMegaLDefinition : (pMegaLDefinition = new MegaLDefinitionElements());
	}
	
	public ParserRule getMegaLDefinitionRule() {
		return getMegaLDefinitionAccess().getRule();
	}

	//ETDR:
	//	ETDEntity | ETDDeclared;
	public ETDRElements getETDRAccess() {
		return (pETDR != null) ? pETDR : (pETDR = new ETDRElements());
	}
	
	public ParserRule getETDRRule() {
		return getETDRAccess().getRule();
	}

	//ETDEntity:
	//	{ETDEntity} "Entity";
	public ETDEntityElements getETDEntityAccess() {
		return (pETDEntity != null) ? pETDEntity : (pETDEntity = new ETDEntityElements());
	}
	
	public ParserRule getETDEntityRule() {
		return getETDEntityAccess().getRule();
	}

	//ETDDeclared:
	//	reference=[ETD];
	public ETDDeclaredElements getETDDeclaredAccess() {
		return (pETDDeclared != null) ? pETDDeclared : (pETDDeclared = new ETDDeclaredElements());
	}
	
	public ParserRule getETDDeclaredRule() {
		return getETDDeclaredAccess().getRule();
	}

	//ETD:
	//	name=ID "<" supertype=ETDR;
	public ETDElements getETDAccess() {
		return (pETD != null) ? pETD : (pETD = new ETDElements());
	}
	
	public ParserRule getETDRule() {
		return getETDAccess().getRule();
	}

	//RTD:
	//	name=ID "<" domain=ETDR "*" coDomain=ETDR;
	public RTDElements getRTDAccess() {
		return (pRTD != null) ? pRTD : (pRTD = new RTDElements());
	}
	
	public ParserRule getRTDRule() {
		return getRTDAccess().getRule();
	}

	//ED:
	//	name=ID ":" type=ETDR;
	public EDElements getEDAccess() {
		return (pED != null) ? pED : (pED = new EDElements());
	}
	
	public ParserRule getEDRule() {
		return getEDAccess().getRule();
	}

	//RD:
	//	source=[ED] rel=[RTD] target=[ED];
	public RDElements getRDAccess() {
		return (pRD != null) ? pRD : (pRD = new RDElements());
	}
	
	public ParserRule getRDRule() {
		return getRDAccess().getRule();
	}

	//QualifiedID:
	//	ID ("." ID)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return (pQualifiedID != null) ? pQualifiedID : (pQualifiedID = new QualifiedIDElements());
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//MegaLLinking:
	//	"linking" name=QualifiedID ("for" target=[MegaLDefinition|QualifiedID])? links+=LD*;
	public MegaLLinkingElements getMegaLLinkingAccess() {
		return (pMegaLLinking != null) ? pMegaLLinking : (pMegaLLinking = new MegaLLinkingElements());
	}
	
	public ParserRule getMegaLLinkingRule() {
		return getMegaLLinkingAccess().getRule();
	}

	//LD:
	//	target=[ED] ("." key=ID)? "=" value=STRING;
	public LDElements getLDAccess() {
		return (pLD != null) ? pLD : (pLD = new LDElements());
	}
	
	public ParserRule getLDRule() {
		return getLDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
