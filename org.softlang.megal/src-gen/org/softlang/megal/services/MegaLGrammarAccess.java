/*
* generated by Xtext
*/
package org.softlang.megal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MegaLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMegaLDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMegaLLinkingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	MegaLDefinition | MegaLLinking;
		public ParserRule getRule() { return rule; }

		//MegaLDefinition | MegaLLinking
		public Alternatives getAlternatives() { return cAlternatives; }

		//MegaLDefinition
		public RuleCall getMegaLDefinitionParserRuleCall_0() { return cMegaLDefinitionParserRuleCall_0; }

		//MegaLLinking
		public RuleCall getMegaLLinkingParserRuleCall_1() { return cMegaLLinkingParserRuleCall_1; }
	}

	public class MegaLDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MegaLDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLinkedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLinkerAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cLinkerMegaLLinkingCrossReference_2_2_0 = (CrossReference)cLinkerAssignment_2_2.eContents().get(0);
		private final RuleCall cLinkerMegaLLinkingQualifiedIDParserRuleCall_2_2_0_1 = (RuleCall)cLinkerMegaLLinkingCrossReference_2_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cImportsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_3_0_0 = (RuleCall)cImportsAssignment_3_0.eContents().get(0);
		private final Assignment cRdsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cRdsRDParserRuleCall_3_1_0 = (RuleCall)cRdsAssignment_3_1.eContents().get(0);
		private final Assignment cEtdsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cEtdsETDParserRuleCall_3_2_0 = (RuleCall)cEtdsAssignment_3_2.eContents().get(0);
		private final Assignment cRtdsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cRtdsRTDParserRuleCall_3_3_0 = (RuleCall)cRtdsAssignment_3_3.eContents().get(0);
		private final Assignment cEdsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cEdsEDGroupParserRuleCall_3_4_0 = (RuleCall)cEdsAssignment_3_4.eContents().get(0);
		
		//MegaLDefinition:
		//	"model" name=QualifiedID ("linked" "in" linker=[MegaLLinking|QualifiedID])? (imports+=Import | rds+=RD | etds+=ETD |
		//	rtds+=RTD | eds+=EDGroup)*;
		public ParserRule getRule() { return rule; }

		//"model" name=QualifiedID ("linked" "in" linker=[MegaLLinking|QualifiedID])? (imports+=Import | rds+=RD | etds+=ETD |
		//rtds+=RTD | eds+=EDGroup)*
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=QualifiedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedID
		public RuleCall getNameQualifiedIDParserRuleCall_1_0() { return cNameQualifiedIDParserRuleCall_1_0; }

		//("linked" "in" linker=[MegaLLinking|QualifiedID])?
		public Group getGroup_2() { return cGroup_2; }

		//"linked"
		public Keyword getLinkedKeyword_2_0() { return cLinkedKeyword_2_0; }

		//"in"
		public Keyword getInKeyword_2_1() { return cInKeyword_2_1; }

		//linker=[MegaLLinking|QualifiedID]
		public Assignment getLinkerAssignment_2_2() { return cLinkerAssignment_2_2; }

		//[MegaLLinking|QualifiedID]
		public CrossReference getLinkerMegaLLinkingCrossReference_2_2_0() { return cLinkerMegaLLinkingCrossReference_2_2_0; }

		//QualifiedID
		public RuleCall getLinkerMegaLLinkingQualifiedIDParserRuleCall_2_2_0_1() { return cLinkerMegaLLinkingQualifiedIDParserRuleCall_2_2_0_1; }

		//(imports+=Import | rds+=RD | etds+=ETD | rtds+=RTD | eds+=EDGroup)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//imports+=Import
		public Assignment getImportsAssignment_3_0() { return cImportsAssignment_3_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0_0() { return cImportsImportParserRuleCall_3_0_0; }

		//rds+=RD
		public Assignment getRdsAssignment_3_1() { return cRdsAssignment_3_1; }

		//RD
		public RuleCall getRdsRDParserRuleCall_3_1_0() { return cRdsRDParserRuleCall_3_1_0; }

		//etds+=ETD
		public Assignment getEtdsAssignment_3_2() { return cEtdsAssignment_3_2; }

		//ETD
		public RuleCall getEtdsETDParserRuleCall_3_2_0() { return cEtdsETDParserRuleCall_3_2_0; }

		//rtds+=RTD
		public Assignment getRtdsAssignment_3_3() { return cRtdsAssignment_3_3; }

		//RTD
		public RuleCall getRtdsRTDParserRuleCall_3_3_0() { return cRtdsRTDParserRuleCall_3_3_0; }

		//eds+=EDGroup
		public Assignment getEdsAssignment_3_4() { return cEdsAssignment_3_4; }

		//EDGroup
		public RuleCall getEdsEDGroupParserRuleCall_3_4_0() { return cEdsEDGroupParserRuleCall_3_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefMegaLDefinitionCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefMegaLDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cRefMegaLDefinitionCrossReference_1_0.eContents().get(1);
		
		//Import:
		//	"import" ref=[MegaLDefinition];
		public ParserRule getRule() { return rule; }

		//"import" ref=[MegaLDefinition]
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//ref=[MegaLDefinition]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[MegaLDefinition]
		public CrossReference getRefMegaLDefinitionCrossReference_1_0() { return cRefMegaLDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getRefMegaLDefinitionIDTerminalRuleCall_1_0_1() { return cRefMegaLDefinitionIDTerminalRuleCall_1_0_1; }
	}

	public class ETDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSupertypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSupertypeETDCrossReference_2_1_0 = (CrossReference)cSupertypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSupertypeETDIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSupertypeETDCrossReference_2_1_0.eContents().get(1);
		
		//ETD:
		//	"define" name=ID ("from" supertype=[ETD])?;
		public ParserRule getRule() { return rule; }

		//"define" name=ID ("from" supertype=[ETD])?
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("from" supertype=[ETD])?
		public Group getGroup_2() { return cGroup_2; }

		//"from"
		public Keyword getFromKeyword_2_0() { return cFromKeyword_2_0; }

		//supertype=[ETD]
		public Assignment getSupertypeAssignment_2_1() { return cSupertypeAssignment_2_1; }

		//[ETD]
		public CrossReference getSupertypeETDCrossReference_2_1_0() { return cSupertypeETDCrossReference_2_1_0; }

		//ID
		public RuleCall getSupertypeETDIDTerminalRuleCall_2_1_0_1() { return cSupertypeETDIDTerminalRuleCall_2_1_0_1; }
	}

	public class RTDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RTD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDomainETDCrossReference_3_0 = (CrossReference)cDomainAssignment_3.eContents().get(0);
		private final RuleCall cDomainETDIDTerminalRuleCall_3_0_1 = (RuleCall)cDomainETDCrossReference_3_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCoDomainAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cCoDomainETDCrossReference_5_0 = (CrossReference)cCoDomainAssignment_5.eContents().get(0);
		private final RuleCall cCoDomainETDIDTerminalRuleCall_5_0_1 = (RuleCall)cCoDomainETDCrossReference_5_0.eContents().get(1);
		
		//RTD:
		//	"define" name=ID ":" domain=[ETD] "->" coDomain=[ETD];
		public ParserRule getRule() { return rule; }

		//"define" name=ID ":" domain=[ETD] "->" coDomain=[ETD]
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//domain=[ETD]
		public Assignment getDomainAssignment_3() { return cDomainAssignment_3; }

		//[ETD]
		public CrossReference getDomainETDCrossReference_3_0() { return cDomainETDCrossReference_3_0; }

		//ID
		public RuleCall getDomainETDIDTerminalRuleCall_3_0_1() { return cDomainETDIDTerminalRuleCall_3_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//coDomain=[ETD]
		public Assignment getCoDomainAssignment_5() { return cCoDomainAssignment_5; }

		//[ETD]
		public CrossReference getCoDomainETDCrossReference_5_0() { return cCoDomainETDCrossReference_5_0; }

		//ID
		public RuleCall getCoDomainETDIDTerminalRuleCall_5_0_1() { return cCoDomainETDIDTerminalRuleCall_5_0_1; }
	}

	public class EDGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeETDCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeETDIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeETDCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsEDParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cItemsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cItemsEDParserRuleCall_3_1_0 = (RuleCall)cItemsAssignment_3_1.eContents().get(0);
		
		//EDGroup:
		//	type=[ETD] ":" items+=ED ("," items+=ED)*;
		public ParserRule getRule() { return rule; }

		//type=[ETD] ":" items+=ED ("," items+=ED)*
		public Group getGroup() { return cGroup; }

		//type=[ETD]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[ETD]
		public CrossReference getTypeETDCrossReference_0_0() { return cTypeETDCrossReference_0_0; }

		//ID
		public RuleCall getTypeETDIDTerminalRuleCall_0_0_1() { return cTypeETDIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//items+=ED
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }

		//ED
		public RuleCall getItemsEDParserRuleCall_2_0() { return cItemsEDParserRuleCall_2_0; }

		//("," items+=ED)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//items+=ED
		public Assignment getItemsAssignment_3_1() { return cItemsAssignment_3_1; }

		//ED
		public RuleCall getItemsEDParserRuleCall_3_1_0() { return cItemsEDParserRuleCall_3_1_0; }
	}

	public class EDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ED");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ED:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class RDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceEDCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceEDIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceEDCrossReference_0_0.eContents().get(1);
		private final Assignment cRelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRelRTDCrossReference_1_0 = (CrossReference)cRelAssignment_1.eContents().get(0);
		private final RuleCall cRelRTDIDTerminalRuleCall_1_0_1 = (RuleCall)cRelRTDCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEDCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEDIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEDCrossReference_2_0.eContents().get(1);
		
		//RD:
		//	source=[ED] rel=[RTD] target=[ED];
		public ParserRule getRule() { return rule; }

		//source=[ED] rel=[RTD] target=[ED]
		public Group getGroup() { return cGroup; }

		//source=[ED]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[ED]
		public CrossReference getSourceEDCrossReference_0_0() { return cSourceEDCrossReference_0_0; }

		//ID
		public RuleCall getSourceEDIDTerminalRuleCall_0_0_1() { return cSourceEDIDTerminalRuleCall_0_0_1; }

		//rel=[RTD]
		public Assignment getRelAssignment_1() { return cRelAssignment_1; }

		//[RTD]
		public CrossReference getRelRTDCrossReference_1_0() { return cRelRTDCrossReference_1_0; }

		//ID
		public RuleCall getRelRTDIDTerminalRuleCall_1_0_1() { return cRelRTDIDTerminalRuleCall_1_0_1; }

		//target=[ED]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[ED]
		public CrossReference getTargetEDCrossReference_2_0() { return cTargetEDCrossReference_2_0; }

		//ID
		public RuleCall getTargetEDIDTerminalRuleCall_2_0_1() { return cTargetEDIDTerminalRuleCall_2_0_1; }
	}

	public class MegaLLinkingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MegaLLinking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTargetMegaLDefinitionCrossReference_2_1_0 = (CrossReference)cTargetAssignment_2_1.eContents().get(0);
		private final RuleCall cTargetMegaLDefinitionQualifiedIDParserRuleCall_2_1_0_1 = (RuleCall)cTargetMegaLDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Assignment cLdsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLdsLDParserRuleCall_3_0 = (RuleCall)cLdsAssignment_3.eContents().get(0);
		
		//MegaLLinking:
		//	"linking" name=QualifiedID ("for" target=[MegaLDefinition|QualifiedID])? lds+=LD*;
		public ParserRule getRule() { return rule; }

		//"linking" name=QualifiedID ("for" target=[MegaLDefinition|QualifiedID])? lds+=LD*
		public Group getGroup() { return cGroup; }

		//"linking"
		public Keyword getLinkingKeyword_0() { return cLinkingKeyword_0; }

		//name=QualifiedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedID
		public RuleCall getNameQualifiedIDParserRuleCall_1_0() { return cNameQualifiedIDParserRuleCall_1_0; }

		//("for" target=[MegaLDefinition|QualifiedID])?
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//target=[MegaLDefinition|QualifiedID]
		public Assignment getTargetAssignment_2_1() { return cTargetAssignment_2_1; }

		//[MegaLDefinition|QualifiedID]
		public CrossReference getTargetMegaLDefinitionCrossReference_2_1_0() { return cTargetMegaLDefinitionCrossReference_2_1_0; }

		//QualifiedID
		public RuleCall getTargetMegaLDefinitionQualifiedIDParserRuleCall_2_1_0_1() { return cTargetMegaLDefinitionQualifiedIDParserRuleCall_2_1_0_1; }

		//lds+=LD*
		public Assignment getLdsAssignment_3() { return cLdsAssignment_3; }

		//LD
		public RuleCall getLdsLDParserRuleCall_3_0() { return cLdsLDParserRuleCall_3_0; }
	}

	public class LDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetEDCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetEDIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetEDCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LD:
		//	target=[ED] "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//target=[ED] "=" value=STRING
		public Group getGroup() { return cGroup; }

		//target=[ED]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[ED]
		public CrossReference getTargetEDCrossReference_0_0() { return cTargetEDCrossReference_0_0; }

		//ID
		public RuleCall getTargetEDIDTerminalRuleCall_0_0_1() { return cTargetEDIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private MegaLDefinitionElements pMegaLDefinition;
	private ImportElements pImport;
	private ETDElements pETD;
	private RTDElements pRTD;
	private EDGroupElements pEDGroup;
	private EDElements pED;
	private RDElements pRD;
	private MegaLLinkingElements pMegaLLinking;
	private LDElements pLD;
	private QualifiedIDElements pQualifiedID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MegaLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.softlang.megal.MegaL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	MegaLDefinition | MegaLLinking;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//MegaLDefinition:
	//	"model" name=QualifiedID ("linked" "in" linker=[MegaLLinking|QualifiedID])? (imports+=Import | rds+=RD | etds+=ETD |
	//	rtds+=RTD | eds+=EDGroup)*;
	public MegaLDefinitionElements getMegaLDefinitionAccess() {
		return (pMegaLDefinition != null) ? pMegaLDefinition : (pMegaLDefinition = new MegaLDefinitionElements());
	}
	
	public ParserRule getMegaLDefinitionRule() {
		return getMegaLDefinitionAccess().getRule();
	}

	//Import:
	//	"import" ref=[MegaLDefinition];
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ETD:
	//	"define" name=ID ("from" supertype=[ETD])?;
	public ETDElements getETDAccess() {
		return (pETD != null) ? pETD : (pETD = new ETDElements());
	}
	
	public ParserRule getETDRule() {
		return getETDAccess().getRule();
	}

	//RTD:
	//	"define" name=ID ":" domain=[ETD] "->" coDomain=[ETD];
	public RTDElements getRTDAccess() {
		return (pRTD != null) ? pRTD : (pRTD = new RTDElements());
	}
	
	public ParserRule getRTDRule() {
		return getRTDAccess().getRule();
	}

	//EDGroup:
	//	type=[ETD] ":" items+=ED ("," items+=ED)*;
	public EDGroupElements getEDGroupAccess() {
		return (pEDGroup != null) ? pEDGroup : (pEDGroup = new EDGroupElements());
	}
	
	public ParserRule getEDGroupRule() {
		return getEDGroupAccess().getRule();
	}

	//ED:
	//	name=ID;
	public EDElements getEDAccess() {
		return (pED != null) ? pED : (pED = new EDElements());
	}
	
	public ParserRule getEDRule() {
		return getEDAccess().getRule();
	}

	//RD:
	//	source=[ED] rel=[RTD] target=[ED];
	public RDElements getRDAccess() {
		return (pRD != null) ? pRD : (pRD = new RDElements());
	}
	
	public ParserRule getRDRule() {
		return getRDAccess().getRule();
	}

	//MegaLLinking:
	//	"linking" name=QualifiedID ("for" target=[MegaLDefinition|QualifiedID])? lds+=LD*;
	public MegaLLinkingElements getMegaLLinkingAccess() {
		return (pMegaLLinking != null) ? pMegaLLinking : (pMegaLLinking = new MegaLLinkingElements());
	}
	
	public ParserRule getMegaLLinkingRule() {
		return getMegaLLinkingAccess().getRule();
	}

	//LD:
	//	target=[ED] "=" value=STRING;
	public LDElements getLDAccess() {
		return (pLD != null) ? pLD : (pLD = new LDElements());
	}
	
	public ParserRule getLDRule() {
		return getLDAccess().getRule();
	}

	//QualifiedID:
	//	ID ("." ID)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return (pQualifiedID != null) ? pQualifiedID : (pQualifiedID = new QualifiedIDElements());
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
