/*
* generated by Xtext
*/
grammar InternalMegaL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.softlang.megal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.softlang.megal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.softlang.megal.services.MegaLGrammarAccess;

}

@parser::members {

 	private MegaLGrammarAccess grammarAccess;
 	
    public InternalMegaLParser(TokenStream input, MegaLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MegaLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelAccess().getMegaLDefinitionParserRuleCall_0()); 
    }
    this_MegaLDefinition_0=ruleMegaLDefinition
    { 
        $current = $this_MegaLDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getMegaLLinkingParserRuleCall_1()); 
    }
    this_MegaLLinking_1=ruleMegaLLinking
    { 
        $current = $this_MegaLLinking_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMegaLDefinition
entryRuleMegaLDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMegaLDefinitionRule()); }
	 iv_ruleMegaLDefinition=ruleMegaLDefinition 
	 { $current=$iv_ruleMegaLDefinition.current; } 
	 EOF 
;

// Rule MegaLDefinition
ruleMegaLDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMegaLDefinitionAccess().getModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMegaLDefinitionAccess().getNameQualifiedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegaLDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='linked' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMegaLDefinitionAccess().getLinkedKeyword_2_0());
    }
	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMegaLDefinitionAccess().getInKeyword_2_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMegaLDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMegaLDefinitionAccess().getLinkerMegaLLinkingCrossReference_2_2_0()); 
	    }
		ruleQualifiedID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getMegaLDefinitionAccess().getImportsImportParserRuleCall_3_0_0()); 
	    }
		lv_imports_5_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegaLDefinitionRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_5_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMegaLDefinitionAccess().getRdsRDParserRuleCall_3_1_0()); 
	    }
		lv_rds_6_0=ruleRD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegaLDefinitionRule());
	        }
       		add(
       			$current, 
       			"rds",
        		lv_rds_6_0, 
        		"RD");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMegaLDefinitionAccess().getEtdsETDParserRuleCall_3_2_0()); 
	    }
		lv_etds_7_0=ruleETD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegaLDefinitionRule());
	        }
       		add(
       			$current, 
       			"etds",
        		lv_etds_7_0, 
        		"ETD");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMegaLDefinitionAccess().getRtdsRTDParserRuleCall_3_3_0()); 
	    }
		lv_rtds_8_0=ruleRTD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegaLDefinitionRule());
	        }
       		add(
       			$current, 
       			"rtds",
        		lv_rtds_8_0, 
        		"RTD");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMegaLDefinitionAccess().getEdsEDGroupParserRuleCall_3_4_0()); 
	    }
		lv_eds_9_0=ruleEDGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegaLDefinitionRule());
	        }
       		add(
       			$current, 
       			"eds",
        		lv_eds_9_0, 
        		"EDGroup");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getImportAccess().getRefMegaLDefinitionCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleETD
entryRuleETD returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getETDRule()); }
	 iv_ruleETD=ruleETD 
	 { $current=$iv_ruleETD.current; } 
	 EOF 
;

// Rule ETD
ruleETD returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getETDAccess().getDefineKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getETDAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getETDRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getETDAccess().getFromKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getETDRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getETDAccess().getSupertypeETDCrossReference_2_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleRTD
entryRuleRTD returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRTDRule()); }
	 iv_ruleRTD=ruleRTD 
	 { $current=$iv_ruleRTD.current; } 
	 EOF 
;

// Rule RTD
ruleRTD returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRTDAccess().getDefineKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRTDAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRTDAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getRTDAccess().getDomainETDCrossReference_3_0()); 
	}

)
)	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRTDAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRTDRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getRTDAccess().getCoDomainETDCrossReference_5_0()); 
	}

)
))
;





// Entry rule entryRuleEDGroup
entryRuleEDGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEDGroupRule()); }
	 iv_ruleEDGroup=ruleEDGroup 
	 { $current=$iv_ruleEDGroup.current; } 
	 EOF 
;

// Rule EDGroup
ruleEDGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEDGroupRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEDGroupAccess().getTypeETDCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEDGroupAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEDGroupAccess().getItemsEDParserRuleCall_2_0()); 
	    }
		lv_items_2_0=ruleED		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEDGroupRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"ED");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEDGroupAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEDGroupAccess().getItemsEDParserRuleCall_3_1_0()); 
	    }
		lv_items_4_0=ruleED		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEDGroupRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"ED");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleED
entryRuleED returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEDRule()); }
	 iv_ruleED=ruleED 
	 { $current=$iv_ruleED.current; } 
	 EOF 
;

// Rule ED
ruleED returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEDAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEDRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleRD
entryRuleRD returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRDRule()); }
	 iv_ruleRD=ruleRD 
	 { $current=$iv_ruleRD.current; } 
	 EOF 
;

// Rule RD
ruleRD returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRDRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRDAccess().getSourceEDCrossReference_0_0()); 
	}

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRDRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRDAccess().getRelRTDCrossReference_1_0()); 
	}

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRDRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRDAccess().getTargetEDCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleMegaLLinking
entryRuleMegaLLinking returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMegaLLinkingRule()); }
	 iv_ruleMegaLLinking=ruleMegaLLinking 
	 { $current=$iv_ruleMegaLLinking.current; } 
	 EOF 
;

// Rule MegaLLinking
ruleMegaLLinking returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='linking' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMegaLLinkingAccess().getLinkingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMegaLLinkingAccess().getNameQualifiedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegaLLinkingRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMegaLLinkingAccess().getForKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMegaLLinkingRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMegaLLinkingAccess().getTargetMegaLDefinitionCrossReference_2_1_0()); 
	    }
		ruleQualifiedID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getMegaLLinkingAccess().getLdsLDParserRuleCall_3_0()); 
	    }
		lv_lds_4_0=ruleLD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegaLLinkingRule());
	        }
       		add(
       			$current, 
       			"lds",
        		lv_lds_4_0, 
        		"LD");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleLD
entryRuleLD returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLDRule()); }
	 iv_ruleLD=ruleLD 
	 { $current=$iv_ruleLD.current; } 
	 EOF 
;

// Rule LD
ruleLD returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLDRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getLDAccess().getTargetEDCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLDAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getLDAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLDRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleQualifiedID
entryRuleQualifiedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIDRule()); } 
	 iv_ruleQualifiedID=ruleQualifiedID 
	 { $current=$iv_ruleQualifiedID.current.getText(); }  
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


