/*
 * generated by Xtext
 */
package org.softlang.megal.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.softlang.megal.calculation.Calculation
import org.softlang.megal.megaL.MegaLDefinition
import org.softlang.megal.megaL.MegaLLinking
import org.softlang.megal.pp.Classifier

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class MegaLScopeProvider extends AbstractDeclarativeScopeProvider {
	def scope_MegaLDefinition(MegaLDefinition d, EReference er) {
	}

	def scope_ETD(MegaLDefinition d, EReference er) {
		val is = Calculation.allDefinitions(d)

		Scopes::scopeFor(is.map[etds].flatten)
	}

	def scope_RTD(MegaLDefinition d, EReference er) {
		val is = Calculation.allDefinitions(d)

		Scopes::scopeFor(is.map[rtds].flatten)
	}

	def scope_ED(MegaLDefinition d, EReference er) {
		val is = Calculation.allDefinitions(d)

		Scopes::scopeFor(is.map[eds].flatten)
	}

	def scope_ETD(MegaLLinking l, EReference er) {
		scope_ETD(l.target, er)
	}

	def scope_RTD(MegaLLinking l, EReference er) {
		scope_RTD(l.target, er)
	}

	def scope_ED(MegaLLinking l, EReference er) {
		scope_ED(l.target, er)
	}

	def packageProviders(MegaLLinking l) {
		val ps = l.projects.map[p|Calculation.tryResolveProject(p)]
		val js = l.jars.map[j|Calculation.tryResolveJar(j)]

		return ps + js
	}

	def visibleClassifiers(MegaLLinking l) {

		// TODO: Implement by resource services which is fukt
		l.packageProviders.filter[present].map[get.allContents.toIterable.filter(Classifier)].flatten
	}

	def scope_Classifier(MegaLLinking l, EReference er) {
		Scopes::scopeFor(visibleClassifiers(l))
	}

	def scope_Provider_classifier(MegaLLinking l, EReference er) {

		// Get all classifiers
		val classifiers = visibleClassifiers(l)

		// Filter resource and VCS providers
		val resourceProviders = classifiers.filter[isImplementationOf("megal.providers.IResourceProvider")]
		val vcsProviders = classifiers.filter[isImplementationOf("megal.providers.IVCSProvider")]

		// Make scope of it
		Scopes::scopeFor(resourceProviders + vcsProviders)
	}
	
	
	def scope_Semantic_classifier(MegaLLinking l, EReference er) {

		// Get all classifiers
		val classifiers = visibleClassifiers(l)

		// Filter resource and VCS providers
		val resourceProviders = classifiers.filter[c|
			c.extends.value == "megal.entity"
		]
		val vcsProviders = classifiers.filter[isImplementationOf("megal.providers.IVCSProvider")]

		// Make scope of it
		Scopes::scopeFor(resourceProviders + vcsProviders)
	}
}
